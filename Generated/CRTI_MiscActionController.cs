#pragma warning disable CS1572

//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//
//     Changes to this file will be lost when regenerated
// </autogenerated>
//------------------------------------------------------------------------------

using Epicor.Cloud;
using Erp.Contracts;
using Microsoft.AspNetCore.Mvc;

namespace Erp.Services.BO
{
    /// <summary>
    /// ASP.NET Core API controller for the Ice.BO.CRTI_MiscAction service.
    /// </summary>
    [Route("api/rpc/Erp.BO.[controller]")]
    [ApiController]
    public class CRTI_MiscActionController : ApiControllerBase
    {
        #region Initialize

        private CRTI_MiscActionSvcContract service;

        /// <summary>
        /// Initializes a new instance of the <see cref="CRTI_MiscActionController"/> class.
        /// </summary>
        public CRTI_MiscActionController(IOperationBoundClassProvider<CRTI_MiscActionSvcContract> provider) : base(provider.ServiceAsOperationBoundClass)
        {
            this.service = provider.Service;
        }

        #endregion

        
        [Route("CallCustomMethod")]
        [HttpPost]
        public (Erp.Tablesets.CRTI_MiscActionTableset, object, object, object, object, object) CallCustomMethod([FromBody]Erp.Tablesets.CRTI_MiscActionTableset ds, [FromBody]string iCustomMethod, [FromBody]System.Object iParam1, [FromBody]System.Object iParam2, [FromBody]System.Object iParam3, [FromBody]System.Object iParam4, [FromBody]System.Object iParam5, [FromBody]System.Object iParam6, [FromBody]System.Object iParam7, [FromBody]System.Object iParam8, [FromBody]System.Object iParam9, [FromBody]System.Object iParam10)
        {
            System.Object oParam1;
            System.Object oParam2;
            System.Object oParam3;
            System.Object oParam4;
            System.Object oParam5;

            service.CallCustomMethod(ref ds, iCustomMethod, iParam1, iParam2, iParam3, iParam4, iParam5, iParam6, iParam7, iParam8, iParam9, iParam10, out oParam1, out oParam2, out oParam3, out oParam4, out oParam5);

            return (ds, oParam1, oParam2, oParam3, oParam4, oParam5);
        }

        /// <summary>
        /// Returns a DataSet given the primary key.
        /// </summary>
        [Route("GetByID")]
        [HttpPost]
        public Erp.Tablesets.CRTI_MiscActionTableset GetByID()
        {
            var ___result = service.GetByID();

            return ___result;
        }

        /// <summary>
        /// Returns a list of rows that satisfy the where clause.
        /// </summary>
        [Route("GetList")]
        [HttpPost]
        public (bool, Erp.Tablesets.CRTI_MiscActionListTableset) GetList([FromBody]string whereClause, [FromBody]int pageSize, [FromBody]int absolutePage)
        {
            bool morePages;

            var ___result = service.GetList(whereClause, pageSize, absolutePage, out morePages);

            return (morePages, ___result);
        }

        /// <summary>
        /// Returns a dataset containing all rows that satisfy the where clauses.
        /// </summary>
        [Route("GetRows")]
        [HttpPost]
        public (bool, Erp.Tablesets.CRTI_MiscActionTableset) GetRows([FromBody]string whereClauseCompany, [FromBody]int pageSize, [FromBody]int absolutePage)
        {
            bool morePages;

            var ___result = service.GetRows(whereClauseCompany, pageSize, absolutePage, out morePages);

            return (morePages, ___result);
        }

        /// <summary>
        /// </summary>
        [Route("GetBySysRowID")]
        [HttpPost]
        public Erp.Tablesets.CRTI_MiscActionTableset GetBySysRowID([FromBody]System.Guid id)
        {
            var ___result = service.GetBySysRowID(id);

            return ___result;
        }

        /// <summary>
        /// </summary>
        [Route("GetBySysRowIDs")]
        [HttpPost]
        public Erp.Tablesets.CRTI_MiscActionTableset GetBySysRowIDs([FromBody]System.Collections.Generic.List<System.Guid> ids)
        {
            var ___result = service.GetBySysRowIDs(ids);

            return ___result;
        }

        /// <summary>
        /// Commits the DataSet changes to the data store.
        /// </summary>
        [Route("Update")]
        [HttpPost]
        public Erp.Tablesets.CRTI_MiscActionTableset Update([FromBody]Erp.Tablesets.CRTI_MiscActionTableset ds)
        {
            service.Update(ref ds);

            return ds;
        }

        /// <summary>
        /// Apply input data to BO by calling GetByID/GetNew/Update methods.
        /// </summary>
        [Route("UpdateExt")]
        [HttpPost]
        public (Erp.Tablesets.UpdExtCRTI_MiscActionTableset, bool, Ice.BOUpdErrorTableset) UpdateExt([FromBody]Erp.Tablesets.UpdExtCRTI_MiscActionTableset ds, [FromBody]bool continueProcessingOnError, [FromBody]bool rollbackParentOnChildError)
        {
            bool errorsOccurred;

            var ___result = service.UpdateExt(ref ds, continueProcessingOnError, rollbackParentOnChildError, out errorsOccurred);

            return (ds, errorsOccurred, ___result);
        }
    }
}
