#pragma warning disable 1591    // Disable XML comment warnings for this file.

//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//
//     Changes to this file will be lost when regenerated
// </autogenerated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Linq.Expressions;
using System.ServiceModel;

using Epicor.Data;
using Epicor.Hosting;

using Ice;

#region Service related namespaces

using Erp.Contracts;
using Erp.Tablesets;

#endregion // Service related namespaces

namespace Erp.Services.BO
{
    [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "3.2.400.0")]
    [ServiceBehavior(InstanceContextMode = System.ServiceModel.InstanceContextMode.PerCall, ConcurrencyMode = System.ServiceModel.ConcurrencyMode.Multiple)]
    public sealed class CRTI_MiscActionSvcFacade : Epicor.Customization.Bpm.SvcFacadeBase<ErpContext, CRTI_MiscActionSvcContract, CRTI_MiscActionSvc>, CRTI_MiscActionSvcContract
    {
        #region Data members

        #endregion // Data members

        public CRTI_MiscActionSvcFacade()
            : base("Erp:BO:CRTI_MiscAction")
        {
        }

        public CRTI_MiscActionSvcFacade(ErpContext ctx)
            : base("Erp:BO:CRTI_MiscAction", ctx)
        {
        }

        #region CRTI_MiscActionSvcContract Members

        public void CallCustomMethod(ref Erp.Tablesets.CRTI_MiscActionTableset ds, string iCustomMethod, object iParam1, object iParam2, object iParam3, object iParam4, object iParam5, object iParam6, object iParam7, object iParam8, object iParam9, object iParam10, out object oParam1, out object oParam2, out object oParam3, out object oParam4, out object oParam5)
        {
            try
            {
                using (var adapter = this.GetImplementation("CallCustomMethod"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<ICRTI_MiscActionExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("iCustomMethod", iCustomMethod);
                        extension___parameters.Add("iParam1", iParam1);
                        extension___parameters.Add("iParam2", iParam2);
                        extension___parameters.Add("iParam3", iParam3);
                        extension___parameters.Add("iParam4", iParam4);
                        extension___parameters.Add("iParam5", iParam5);
                        extension___parameters.Add("iParam6", iParam6);
                        extension___parameters.Add("iParam7", iParam7);
                        extension___parameters.Add("iParam8", iParam8);
                        extension___parameters.Add("iParam9", iParam9);
                        extension___parameters.Add("iParam10", iParam10);
                        extension___implementation.BeforeMethod("CallCustomMethod", extension___parameters);
                    }

                    adapter.Impl.CallCustomMethod(ref ds, iCustomMethod, iParam1, iParam2, iParam3, iParam4, iParam5, iParam6, iParam7, iParam8, iParam9, iParam10, out oParam1, out oParam2, out oParam3, out oParam4, out oParam5);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("iCustomMethod", iCustomMethod);
                        extension___parameters.Add("iParam1", iParam1);
                        extension___parameters.Add("iParam2", iParam2);
                        extension___parameters.Add("iParam3", iParam3);
                        extension___parameters.Add("iParam4", iParam4);
                        extension___parameters.Add("iParam5", iParam5);
                        extension___parameters.Add("iParam6", iParam6);
                        extension___parameters.Add("iParam7", iParam7);
                        extension___parameters.Add("iParam8", iParam8);
                        extension___parameters.Add("iParam9", iParam9);
                        extension___parameters.Add("iParam10", iParam10);
                        extension___parameters.Add("oParam1", oParam1);
                        extension___parameters.Add("oParam2", oParam2);
                        extension___parameters.Add("oParam3", oParam3);
                        extension___parameters.Add("oParam4", oParam4);
                        extension___parameters.Add("oParam5", oParam5);
                        extension___implementation.AfterMethod("CallCustomMethod", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                       Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public Erp.Tablesets.CRTI_MiscActionTableset GetByID()
        {
            try
            {
                using (var adapter = this.GetImplementation("GetByID"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<ICRTI_MiscActionExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___implementation.BeforeMethod("GetByID", extension___parameters);
                    }

                    var _return = adapter.Impl.GetByID();

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___implementation.AfterMethod("GetByID", _return, extension___parameters);
                    }

                    if (this.IsRoot)
                    {
                       Ice.Manager.Security.CensorColumns(_return);
                    }
                    return _return;
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public Erp.Tablesets.CRTI_MiscActionListTableset GetList(string whereClause, int pageSize, int absolutePage, out bool morePages)
        {
            try
            {
                using (var adapter = this.GetImplementation("GetList"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<ICRTI_MiscActionExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("whereClause", whereClause);
                        extension___parameters.Add("pageSize", pageSize);
                        extension___parameters.Add("absolutePage", absolutePage);
                        extension___implementation.BeforeMethod("GetList", extension___parameters);
                    }

                    var _return = adapter.Impl.GetList(whereClause, pageSize, absolutePage, out morePages);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("whereClause", whereClause);
                        extension___parameters.Add("pageSize", pageSize);
                        extension___parameters.Add("absolutePage", absolutePage);
                        extension___parameters.Add("morePages", morePages);
                        extension___implementation.AfterMethod("GetList", _return, extension___parameters);
                    }

                    if (this.IsRoot)
                    {
                       Ice.Manager.Security.CensorColumns(_return);
                    }
                    return _return;
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public Erp.Tablesets.CRTI_MiscActionTableset GetRows(string whereClauseCompany, int pageSize, int absolutePage, out bool morePages)
        {
            try
            {
                using (var adapter = this.GetImplementation("GetRows"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<ICRTI_MiscActionExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("whereClauseCompany", whereClauseCompany);
                        extension___parameters.Add("pageSize", pageSize);
                        extension___parameters.Add("absolutePage", absolutePage);
                        extension___implementation.BeforeMethod("GetRows", extension___parameters);
                    }

                    var _return = adapter.Impl.GetRows(whereClauseCompany, pageSize, absolutePage, out morePages);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("whereClauseCompany", whereClauseCompany);
                        extension___parameters.Add("pageSize", pageSize);
                        extension___parameters.Add("absolutePage", absolutePage);
                        extension___parameters.Add("morePages", morePages);
                        extension___implementation.AfterMethod("GetRows", _return, extension___parameters);
                    }

                    if (this.IsRoot)
                    {
                       Ice.Manager.Security.CensorColumns(_return);
                    }
                    return _return;
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public Erp.Tablesets.CRTI_MiscActionTableset GetBySysRowID(System.Guid id)
        {
            try
            {
                using (var adapter = this.GetImplementation("GetBySysRowID"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<ICRTI_MiscActionExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("id", id);
                        extension___implementation.BeforeMethod("GetBySysRowID", extension___parameters);
                    }

                    var _return = adapter.Impl.GetBySysRowID(id);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("id", id);
                        extension___implementation.AfterMethod("GetBySysRowID", _return, extension___parameters);
                    }

                    if (this.IsRoot)
                    {
                       Ice.Manager.Security.CensorColumns(_return);
                    }
                    return _return;
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public Erp.Tablesets.CRTI_MiscActionTableset GetBySysRowIDs(System.Collections.Generic.List<System.Guid> ids)
        {
            try
            {
                using (var adapter = this.GetImplementation("GetBySysRowIDs"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<ICRTI_MiscActionExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ids", ids);
                        extension___implementation.BeforeMethod("GetBySysRowIDs", extension___parameters);
                    }

                    var _return = adapter.Impl.GetBySysRowIDs(ids);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ids", ids);
                        extension___implementation.AfterMethod("GetBySysRowIDs", _return, extension___parameters);
                    }

                    if (this.IsRoot)
                    {
                       Ice.Manager.Security.CensorColumns(_return);
                    }
                    return _return;
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void Update(ref Erp.Tablesets.CRTI_MiscActionTableset ds)
        {
            try
            {
                using (var adapter = this.GetImplementation("Update"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<ICRTI_MiscActionExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("Update", extension___parameters);
                    }

                    adapter.Impl.Update(ref ds);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.AfterMethod("Update", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                       Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public Ice.BOUpdErrorTableset UpdateExt(ref Erp.Tablesets.UpdExtCRTI_MiscActionTableset ds, bool continueProcessingOnError, bool rollbackParentOnChildError, out bool errorsOccurred)
        {
            try
            {
                using (var adapter = this.GetImplementation("UpdateExt"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<ICRTI_MiscActionExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("continueProcessingOnError", continueProcessingOnError);
                        extension___parameters.Add("rollbackParentOnChildError", rollbackParentOnChildError);
                        extension___implementation.BeforeMethod("UpdateExt", extension___parameters);
                    }

                    var _return = adapter.Impl.UpdateExt(ref ds, continueProcessingOnError, rollbackParentOnChildError, out errorsOccurred);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("continueProcessingOnError", continueProcessingOnError);
                        extension___parameters.Add("rollbackParentOnChildError", rollbackParentOnChildError);
                        extension___parameters.Add("errorsOccurred", errorsOccurred);
                        extension___implementation.AfterMethod("UpdateExt", _return, extension___parameters);
                    }

                    if (this.IsRoot)
                    {
                       Ice.Manager.Security.CensorColumns(ds);
                       Ice.Manager.Security.CensorColumns(_return);
                    }
                    return _return;
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        #endregion // CRTI_MiscActionSvcContract Members
    }

    #region Extensions

    [Epicor.Extensions.ExtensionExport]
    public interface ICRTI_MiscActionExtender : Ice.Extensions.IServiceExtender
    {
    }

    [Epicor.Extensions.ExtensionExport]
    public interface ICRTI_MiscActionUpdater : Ice.Extensions.IUpdater
    {
    }

    #endregion
}
