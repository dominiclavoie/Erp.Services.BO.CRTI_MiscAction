//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//
//     Changes to this file will be lost when regenerated
// </autogenerated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.ServiceModel;
using Epicor.Data;
using Epicor.Hosting;
using Erp.Contracts;
using Erp.Tablesets;
using Ice;
using Ice.ExtendedData;

namespace Erp.Services.BO
{

    [ServiceBehavior(InstanceContextMode = InstanceContextMode.PerCall, ConcurrencyMode = ConcurrencyMode.Multiple)]
    [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1063:ImplementIDisposableCorrectly", Justification = "False positive. IDisposable is implemented in TablesetBound. See http://stackoverflow.com/questions/8925925/code-analysis-ca1063-fires-when-deriving-from-idisposable-and-providing-implemen for details.")]
    public partial class CRTI_MiscActionSvc : TablesetBound<Erp.ErpContext, CRTI_MiscActionTableset, CRTI_MiscActionListTableset>, CRTI_MiscActionSvcContract
    {
        #region Declarations

        // Database rows

        // Temp-table rows
        /// <summary>
        /// Current row being acted upon by the framework
        /// </summary>
        protected CompanyRow ttCompany;
        /// <summary>
        /// Current row being acted upon by the framework
        /// </summary>
        protected CompanyListRow ttCompanyList;

        // Before-image rows

        /// <summary>
        /// The well known Name of this Service
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "3.2.400.0")]
        protected override string Name
        {
            get
            {
                return "CRTI_MiscAction";
            }
        }
        /// <summary>
        /// List of required modules indicated in the Service Designer
        /// </summary>
        static readonly Guid[] requiredModuleIDs = {  };

        #endregion Declarations

        #region Constructor

        /// <summary>
        /// Service Constructor
        /// </summary>
        /// <param name="ctx">Context</param>
        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "3.2.400.0")]
        public CRTI_MiscActionSvc(ErpContext ctx)
            : base(ctx)
        {
            InitializeEvents();
        }

        #endregion Constructor

        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "3.2.400.0")]
        private void InitializeEvents()
        {
            Session.VerifyLicenseAccess(requiredModuleIDs);
            this.HasColumnCompanyID = true;
            this.UseCurrentCompany = true;
            this.UseCurrentTenant = false;
        }

        /// <summary>
        /// Determines whether a table should be read by the framework.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "3.2.400.0")]
        protected override bool CanRead(int tableNumber)
        {
            switch (tableNumber)
            {
                case 0:
                    return false;
                default:
                    throw new ArgumentException();
            }
        }

        /// <summary>
        /// Determines whether a table should be updated by the framework.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "3.2.400.0")]
        protected override bool CanWrite(int tableNumber)
        {
            switch (tableNumber)
            {
                case 0:
                    return false;
                default:
                    throw new ArgumentException();
            }
        }

        /// <summary>
        /// Create a new typed database row (LinqRow)
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "3.2.400.0")]
        protected override LinqRow CreateDBRow(int tableNumber)
        {
            switch (tableNumber)
            {
                case 0:
                    return new Erp.Tables.Company();
                default:
                    throw new ArgumentException();
            }
        }

        /// <summary>
        /// Get a database row by row ID
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "3.2.400.0")]
        protected override LinqRow GetDBRowWithUpdLock(int tableNumber, Guid rowID)
        {
            switch (tableNumber)
            {
                case 0:
                    return Erp.Tables.Company.FindFirstBySysRowIDWithUpdLock(Db, rowID);
                default:
                    throw new ArgumentException();
            }
        }

        #region Mappers
        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "3.2.400.0")]
        [Obsolete]
        static List<Func<IceDataContext, IceRow, LinqRow>> bufferCopyFuncList = new List<Func<IceDataContext, IceRow, LinqRow>>()
            {
                new Func<IceDataContext, IceRow, LinqRow>((IceDataContext dc, IceRow row) =>
                    BufferCopy.Copy<Erp.Tables.Company>(row, true))
            };

        /// <summary>
        /// The list of Actions that copy data from a tableset row into a database row for an Update.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "3.2.400.0")]
        [Obsolete]
        protected override List<Func<IceDataContext, IceRow, LinqRow>> TableUpdateActions
        {
            get { return bufferCopyFuncList; }
        }
        #endregion Mappers

        #region Dispatchers

        /// <summary>
        /// Dispatch BO events to the appropriate partial method
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "3.2.400.0")]
        protected override void OnTablesetEvent(DatasetEventType type)
        {
            switch (type)
            {
                case DatasetEventType.AfterGetList:
                    AfterGetList();
                    break;
                case DatasetEventType.AfterGetRows:
                    AfterGetRows();
                    break;
                case DatasetEventType.AfterUpdate:
                    AfterUpdate();
                    break;
                case DatasetEventType.AfterUpdatePostTrans:
                    AfterUpdatePostTrans();
                    break;
                case DatasetEventType.BeforeUpdate:
                    BeforeUpdate();
                    break;
            }
        }

        /// <summary>
        /// Dispatch row events to the appropriate partial method
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "3.2.400.0")]
        protected override void OnRowEvent(DataTableEventType type, string tableName, IceRow row)
        {
            switch (type)
            {
                case DataTableEventType.GetListRowLoaded:
                    GetListRowLoaded();
                    break;

            }
        }

        /// <summary>
        /// Sets current row being worked upon
        /// </summary>
        /// <param name="tableName">The current table</param>
        /// <param name="row">The current row</param>
        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "3.2.400.0")]
        protected override void PrepareForRowEvent(string tableName, IceRow row)
        {
            switch (tableName)
            {
                case "Company":
                    ttCompany = (CompanyRow)row;
                    break;
                case "CompanyList":
                    ttCompanyList = (CompanyListRow)row;
                    break;
            }
        }

        /// <summary>
        /// Sets current dbrow being worked upon
        /// </summary>
        /// <param name="tableName">The current table</param>
        /// <param name="dbRow">The current dbRow</param>
        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "3.2.400.0")]
        protected override void PrepareForRowEvent(string tableName, LinqRow dbRow)
        {
        }

        /// <summary>
        /// Sets current rows being worked upon
        /// </summary>
        /// <param name="tableName">The current table</param>
        /// <param name="row">The current row</param>
        /// <param name="bittRow">The current bittRow</param>
        /// <param name="dbRow">The current dbRow</param>
        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "3.2.400.0")]
        protected override void PrepareForRowEvent(string tableName, IceRow row, IceRow bittRow, LinqRow dbRow)
        {
        }

        /// <summary>
        /// Call the BeforeGetRows() partial method
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "3.2.400.0")]
        protected override void OnBeforeGetRows(Dictionary<IIceTable, QueryModifier> queryModifiers)
        {
            BeforeGetRows(queryModifiers);
        }

        /// <summary>
        /// Call the BeforeGetList() partial method
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "3.2.400.0")]
        protected override void OnBeforeGetList(QueryModifier queryModifier)
        {
            BeforeGetList(queryModifier);
        }

        #region DataSetEvents
        partial void AfterGetList();
        partial void AfterGetRows();
        partial void AfterUpdate();
        partial void AfterUpdatePostTrans();
        partial void BeforeBOGetByID();
        partial void BeforeGetList(QueryModifier queryModifier);
        partial void BeforeGetRows(Dictionary<IIceTable, QueryModifier> queryModifiers);
        partial void BeforeUpdate();
        partial void GetListRowLoaded();
        #endregion DataSetEvents
        #endregion Dispatchers

        #region Table Specific Methods
        #endregion Table Specific Methods

        #region DataSet Methods
        #region GetByID
        /// <summary>
        /// Returns a DataSet given the primary key.
        /// </summary>
        /// <returns>The DataSet.</returns>
        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "3.2.400.0")]
        public CRTI_MiscActionTableset GetByID()
        {
            bool morePages;
            CurrentFullTableset = new CRTI_MiscActionTableset();
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("Company", CallContext.Session.CompanyID);

            InnerGetByID(Db, 0, 0, out morePages, CurrentFullTableset, parameters);
            return CurrentFullTableset;
        }
        #endregion GetByID

        #region OnBeforeGetByID
        /// <summary>
        /// Invokes the BeforeGetByID method with appropriate parameters.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "3.2.400.0")]
        protected override void OnBeforeGetByID(CRTI_MiscActionTableset ds, IEnumerable<KeyValuePair<string, object>> queryParameters)
        {
            BeforeBOGetByID(
            );
        }
        #endregion OnBeforeGetByID

        #region GetList
        /// <summary>
        /// Returns a list of rows that satisfy the where clause.
        /// </summary>
        /// <param name="whereClause">An expression used to filter the rows. Can be left blank for all rows.</param>
        /// <param name="pageSize">The maximum number of rows to return. Leave as zero for no maximum.</param>
        /// <param name="absolutePage">Page of rows to return.</param>
        /// <param name="morePages">Whether there are more pages of rows available.</param>
        /// <returns>The list DataSet.</returns>
        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "3.2.400.0")]
        public CRTI_MiscActionListTableset GetList(string whereClause, int pageSize, int absolutePage, out bool morePages)
        {
            CurrentListTableset = new CRTI_MiscActionListTableset();
            InnerGetList(Db, whereClause, pageSize, absolutePage, CurrentListTableset, out morePages);
            return CurrentListTableset;
        }
        #endregion GetList

        #region GetRows
        /// <summary>
        /// Returns a dataset containing all rows that satisfy the where clauses.
        /// </summary>
        /// <returns>The full DataSet.</returns>
        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "3.2.400.0")]
        public CRTI_MiscActionTableset GetRows(string whereClauseCompany, int pageSize, int absolutePage, out bool morePages)
        {
            CurrentFullTableset = new CRTI_MiscActionTableset();
            Dictionary<IIceTable, string> tableWhereClauses = new Dictionary<IIceTable, string>();
            tableWhereClauses.Add(CurrentFullTableset.Company, whereClauseCompany);

            InnerGetRows(Db, pageSize, absolutePage, out morePages, CurrentFullTableset, tableWhereClauses);
            return CurrentFullTableset;
        }
        #endregion GetRows

        #region SysRowID methods

        /// <summary>
        /// </summary>
        public CRTI_MiscActionTableset GetBySysRowID(Guid id)
        {
            var whereClause = string.Format("SysRowID = '{0}'", id);

            bool morePages;
            var ds = GetRows(whereClause, 0, 0, out morePages);

            if (ds.Tables[0].Count <= 0)
            {
                throw new Ice.Common.RecordNotFoundException("Record not found.", ds.Tables[0].TableName, null);
            }

            return ds;
        }

        /// <summary>
        /// </summary>
        public CRTI_MiscActionTableset GetBySysRowIDs(System.Collections.Generic.List<Guid> ids)
        {
            if (ids.Count == 0)
                throw new ArgumentException("No IDs sent.");

            var whereClause = new System.Text.StringBuilder("SysRowID in (");
            bool first = true;
            foreach (var id in ids)
            {
                if (first)
                    first = false;
                else
                    whereClause.Append(", ");

                whereClause.AppendFormat("'{0}'", id);
            }

            whereClause.Append(")");

            bool morePages;
            return GetRows(whereClause.ToString(), 0, 0, out morePages);
        }

        #endregion

        #region Update
        /// <summary>
        /// Commits the DataSet changes to the data store.
        /// </summary>
        /// <param name="ds">The full DataSet.</param>
        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "3.2.400.0")]
        public void Update(ref CRTI_MiscActionTableset ds)
        {
            this.InnerUpdate<ICRTI_MiscActionUpdater>(Db, ds);

            ds = MainTableSet;
        }
        #endregion Update

        #region UpdateExt
        /// <summary>
        /// Apply input data to BO by calling GetByID/GetNew/Update methods.
        /// </summary>
        /// <returns>The dataset with list of errors occurred during update process.</returns>
        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "3.2.400.0")]
        [Ice.Services.MethodGenerationOptions(SparseCopy = true)]
        public BOUpdErrorTableset UpdateExt(ref UpdExtCRTI_MiscActionTableset ds, bool continueProcessingOnError, bool rollbackParentOnChildError, out bool errorsOccurred)
        {
            errorsOccurred = false;
            var errors = new BOUpdErrorTableset();

            var returnDs = new UpdExtCRTI_MiscActionTableset();
            var initializedTableset = new UpdExtCRTI_MiscActionTableset();

            ds = (UpdExtCRTI_MiscActionTableset)InnerUpdateExt(ds, returnDs, initializedTableset, continueProcessingOnError, rollbackParentOnChildError, errors, out errorsOccurred);
            return errors;
        }

        /// <inheritdoc />
        protected override IDisposable GetServiceForUpdateExt()
        {
            return Ice.Assemblies.ServiceRenderer.GetService<CRTI_MiscActionSvcContract>(this.Db);
        }

        /// <inheritdoc />
        protected override CRTI_MiscActionTableset GetByIdForUpdateExt(object serviceObject, IceRow originalParentRecord)
        {
            var service = (CRTI_MiscActionSvcContract)serviceObject;
            return service?.GetByID();
        }

        /// <inheritdoc />
        protected override void GetNewForUpdateExt(object serviceObject, string tableName, ref CRTI_MiscActionTableset workingTs, IceRow currentRecord, IceRow updatedParentRecord)
        {
            var service = (CRTI_MiscActionSvcContract)serviceObject;
        }

        /// <inheritdoc />
        protected override void UpdateForUpdateExt(object serviceObject, ref CRTI_MiscActionTableset workingTs)
        {
            var service = (CRTI_MiscActionSvcContract)serviceObject;
            service?.Update(ref workingTs);
        }

        /// <inheritdoc />
        protected override List<IceRow> GetChildRowsForUpdateExt(string tableName, IceRow originalParentRecord, Ice.Tableset.TableRelation parentToChildRelation)
        {
            var rows = new List<IceRow>();
            switch (tableName)
            {
                case "Company":
                    rows = GetChildRowsForUpdateExt<CompanyRow>(parentToChildRelation, originalParentRecord);
                    break;
            }
            return rows;
        }

        #endregion UpdateExt
        #endregion DataSet Methods
    }
}
